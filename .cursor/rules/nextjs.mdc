---
description: Anything nextjs related
globs: 
alwaysApply: false
---
# Next.js 15 with React 19 and Vercel AI SDK

## Verified Technology Stack

**Framework Versions (Verified from package.json):**
- **Next.js**: ^15.2.4
- **React**: ^19.0.0
- **React DOM**: ^19.0.0
- **Node.js**: >=20.11.1 (required minimum)
- **TypeScript**: ^5.3.3

## Next.js 15 Configuration

### package.json Scripts
```json
{
  "scripts": {
    "dev": "next dev",
    "dev:turbo": "next dev --turbopack",
    "build": "next build",
    "debug-build": "next build --debug",
    "verbose-build": "NODE_OPTIONS='--trace-warnings --max-old-space-size=3072' NEXT_TELEMETRY_DISABLED=1 DEBUG=* next build",
    "start": "next start",
    "lint": "next lint"
  }
}
```

### next.config.js Configuration
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Stable features (formerly experimental)
  bundlePagesRouterDependencies: true,
  serverExternalPackages: ["sharp"],

  // Router cache configuration
  experimental: {
    staleTimes: {
      dynamic: 30,  // Cache dynamic pages for 30 seconds
      static: 180,  // Cache static pages for 3 minutes
    },
    optimizeCss: {
      cssModules: true,
      fontLoaders: [{ loader: "next-font-loader" }],
    },
    optimizeServerReact: true,
    webpackBuildWorker: true,
    memoryBasedWorkersCount: true,
  },

  // Image optimization
  images: {
    formats: ["image/avif", "image/webp"],
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    unoptimized: process.env.NODE_ENV === "development",
  },

  // Performance optimizations
  staticPageGenerationTimeout: 180,
  productionBrowserSourceMaps: false,
  output: "standalone",
  reactStrictMode: process.env.NODE_ENV !== "development",
};

module.exports = nextConfig;
```

### tsconfig.json
```json
{
  "compilerOptions": {
    "strict": true,
    "target": "ES2022",
    "lib": ["dom", "dom.iterable", "esnext"],
    "jsx": "preserve",
    "module": "esnext",
    "moduleResolution": "bundler",
    "noEmit": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

## React 19 and Next.js 15 Best Practices

### Component Architecture
- **Favor React Server Components (RSC)** where possible
- **Minimize 'use client' directives** - only use when necessary for interactivity
- **Implement proper error boundaries** for both client and server components
- **Use Suspense for async operations** and loading states
- **Optimize for performance and Web Vitals**

### State Management
- **Use `useActionState`** instead of deprecated `useFormState`
- **Leverage enhanced `useFormStatus`** with new properties (data, method, action)
- **Implement URL state management with 'nuqs'** for shareable state
- **Minimize client-side state** - prefer server state when possible

### Async Request APIs
Always use async versions of Next.js runtime APIs:

```typescript
// Runtime APIs - Always use async versions
const cookieStore = await cookies()
const headersList = await headers()
const { isEnabled } = await draftMode()

// Page/Layout props - Always await params and searchParams
export default async function Page(props: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const params = await props.params
  const searchParams = await props.searchParams
  
  return <div>Page content</div>
}
```

### Data Fetching Patterns

**Important**: Fetch requests are **no longer cached by default** in Next.js 15.

```typescript
// Explicitly cached request
const response = await fetch('/api/data', {
  cache: 'force-cache' // Explicitly cache this request
})

// Layout/page-level caching
export const fetchCache = 'default-cache'

// Server Component data fetching
async function getData() {
  const response = await fetch('/api/posts')
  if (!response.ok) throw new Error('Failed to fetch data')
  return response.json()
}

export default async function PostsPage() {
  const data = await getData()
  return <div>{/* Render data */}</div>
}
```

### Route Handlers

```typescript
// Cached route handler
export const dynamic = 'force-static'

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url)
  const id = searchParams.get('id')
  
  // Process request
  return Response.json({ data: 'response' })
}

// Route handler with async params
export async function GET(
  request: Request,
  { params }: { params: Promise<{ slug: string }> }
) {
  const { slug } = await params
  
  return Response.json({ slug })
}
```

## Vercel AI SDK Integration

### Core Concepts
- Use the **AI SDK** for building AI-powered streaming text and chat UIs
- **Three main packages**:
  1. `ai` - Core functionality and streaming utilities
  2. `@ai-sdk/[provider]` - Model provider integrations (e.g., OpenAI)
  3. React hooks for UI components

### Route Handler Setup
```typescript
import { openai } from '@ai-sdk/openai';
import { streamText } from 'ai';

export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
    tools: {
      // Define tools for multi-step interactions
      weather: {
        description: 'Get weather information',
        parameters: z.object({
          location: z.string().describe('The location to get weather for'),
        }),
        execute: async ({ location }) => {
          // Implementation
          return { temperature: 72, condition: 'sunny' };
        },
      },
    },
  });

  return result.toDataStreamResponse();
}
```

### Chat UI Implementation
```typescript
'use client';

import { useChat } from 'ai/react';

export default function Chat() {
  const { messages, input, handleInputChange, handleSubmit, isLoading } = useChat({
    api: '/api/chat',
    maxSteps: 5, // Enable multi-step tool interactions
  });

  return (
    <div className="flex flex-col w-full max-w-md py-24 mx-auto stretch">
      {messages.map(m => (
        <div key={m.id} className="whitespace-pre-wrap">
          {m.role === 'user' ? 'User: ' : 'AI: '}
          {m.toolInvocations ? (
            <pre>{JSON.stringify(m.toolInvocations, null, 2)}</pre>
          ) : (
            m.content
          )}
        </div>
      ))}

      <form onSubmit={handleSubmit}>
        <input
          className="fixed bottom-0 w-full max-w-md p-2 mb-8 border border-gray-300 rounded shadow-xl"
          value={input}
          placeholder="Say something..."
          onChange={handleInputChange}
          disabled={isLoading}
        />
      </form>
    </div>
  );
}
```

## Route Groups Pattern

This project uses **route groups** with **nested layouts** for better organization:

### File Structure Pattern
```
src/app/
├── (site)/                    # Route group - doesn't affect URLs
│   ├── layout.tsx            # Shared layout for all site pages
│   ├── advising/
│   │   └── page.tsx          # Page content: /advising
│   ├── building/
│   │   └── page.tsx          # Page content: /building
│   └── investing/
│       └── page.tsx          # Page content: /investing
├── advising/                  # Regular route segment
│   ├── layout.tsx            # Section-specific layout
│   └── metadata.ts           # Section-specific metadata
├── building/
│   ├── layout.tsx
│   └── metadata.ts
└── investing/
    ├── layout.tsx
    └── metadata.ts
```

### How Route Groups Work
- **Route Groups** `(site)`: Folders in parentheses don't affect URLs
- **Regular Folders** `/advising`: Define URL paths and contain layouts/metadata
- **Content comes from route groups**, **configuration from regular folders**

### URL Resolution Hierarchy
For URL `/advising`:
1. `src/app/layout.tsx` (root layout)
2. `src/app/advising/layout.tsx` (section layout)
3. `src/app/advising/metadata.ts` (section metadata)
4. `src/app/(site)/advising/page.tsx` (actual page content)

## Performance Optimization

### Core Web Vitals
- **Monitor LCP, FID, and CLS** metrics
- **Use `next/image`** for optimized images
- **Implement code splitting** with dynamic imports
- **Configure `staleTimes`** for client-side router cache

### Build Optimization
```javascript
// next.config.js optimizations
const nextConfig = {
  // Enable compression
  compress: true,
  
  // Optimize bundles
  experimental: {
    optimizePackageImports: ['@radix-ui/react-icons'],
  },
  
  // Memory optimization
  onDemandEntries: {
    maxInactiveAge: 25 * 1000,
    pagesBufferLength: 2,
  },
};
```

### Font Optimization
```typescript
import { Inter } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.variable}>
      <body className="font-sans">{children}</body>
    </html>
  )
}
```

## TypeScript Best Practices

### Type Safety
```typescript
// Use proper type safety and inference
interface PageProps {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

// Prefer interfaces over types
interface User {
  id: string
  name: string
  email: string
}

// Use satisfies operator for type validation
const config = {
  apiUrl: 'https://api.example.com',
  timeout: 5000,
} satisfies ApiConfig

// Avoid enums; use const maps instead
const Status = {
  PENDING: 'pending',
  APPROVED: 'approved',
  REJECTED: 'rejected',
} as const

type StatusType = typeof Status[keyof typeof Status]
```

### Component Patterns
```typescript
// Server Component with proper typing
interface PostsPageProps {
  params: Promise<{ category: string }>
  searchParams: Promise<{ page?: string }>
}

export default async function PostsPage({ params, searchParams }: PostsPageProps) {
  const { category } = await params
  const { page = '1' } = await searchParams
  
  const posts = await getPosts({ category, page: parseInt(page) })
  
  return <PostList posts={posts} />
}

// Client Component with proper state
'use client'

interface PostListProps {
  posts: Post[]
}

export function PostList({ posts }: PostListProps) {
  const [selectedPost, setSelectedPost] = useState<Post | null>(null)
  
  return (
    <div>
      {posts.map(post => (
        <PostCard 
          key={post.id} 
          post={post} 
          onSelect={setSelectedPost}
        />
      ))}
    </div>
  )
}
```

## Error Handling

### Error Boundaries
```typescript
// error.tsx - Route-level error boundary
'use client'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={reset}>Try again</button>
    </div>
  )
}

// global-error.tsx - Global error boundary
'use client'

export default function GlobalError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <html>
      <body>
        <h2>Something went wrong!</h2>
        <button onClick={reset}>Try again</button>
      </body>
    </html>
  )
}
```

### Loading States
```typescript
// loading.tsx - Route-level loading UI
export default function Loading() {
  return <div>Loading...</div>
}

// Using Suspense in components
import { Suspense } from 'react'

export default function Page() {
  return (
    <div>
      <h1>Posts</h1>
      <Suspense fallback={<div>Loading posts...</div>}>
        <PostList />
      </Suspense>
    </div>
  )
}
```

## Testing Strategy

### Component Testing
```typescript
import { render, screen } from '@testing-library/react'
import { PostCard } from '../PostCard'

describe('PostCard', () => {
  it('renders post title and excerpt', () => {
    const post = {
      id: '1',
      title: 'Test Post',
      excerpt: 'Test excerpt',
      slug: 'test-post',
    }
    
    render(<PostCard post={post} />)
    
    expect(screen.getByText('Test Post')).toBeInTheDocument()
    expect(screen.getByText('Test excerpt')).toBeInTheDocument()
  })
})
```

### API Route Testing
```typescript
import { GET } from '../app/api/posts/route'

describe('/api/posts', () => {
  it('returns posts data', async () => {
    const request = new Request('http://localhost:3000/api/posts')
    const response = await GET(request)
    const data = await response.json()
    
    expect(response.status).toBe(200)
    expect(data).toHaveProperty('posts')
  })
})
```
