---
description:
globs:
alwaysApply: false
---
# Metadata and Social Media Sharing Implementation Guide

## Project Overview

This project implements comprehensive metadata and social media sharing functionality across all website pages using Next.js 15 Metadata API. The implementation ensures proper OpenGraph, Twitter Card, and SEO metadata for optimal social platform previews and search engine optimization.

**Key Features:**
- **Complete Coverage**: All page types have proper metadata (static, dynamic, admin)
- **Social Media Optimization**: OpenGraph and Twitter Card support for all major platforms
- **Dynamic Generation**: Content-driven metadata for blog posts and projects
- **Brand Consistency**: Unified "Doug.is" branding across all social sharing
- **Security**: Admin pages protected with noindex metadata
- **Performance**: Zero impact on page load times using Next.js 15 Metadata API

**Supported Platforms:**
- Twitter/X, LinkedIn, Facebook, Discord, Slack, WhatsApp, iMessage, Telegram
- Google, Bing, and other search engines
- Rich link previews in messaging applications

## Metadata Architecture

### Implementation Approach

**Next.js 15 Metadata API Integration:**
- Uses Next.js 15's built-in Metadata API for optimal performance
- Layout-level and page-level metadata hierarchy
- Dynamic metadata generation for content-driven pages
- Static metadata for consistent branding

**Route Groups Architecture Integration:**
```
src/app/
├── (site)/                    # Route group - actual page content
│   ├── layout.tsx            # Main site metadata defaults
│   ├── advising/page.tsx     # Section content
│   └── thinking/page.tsx     # Section content
├── advising/                  # Regular route - metadata configuration
│   └── metadata.ts           # Section-specific metadata
└── thinking/                  # Regular route - metadata configuration
    └── metadata.ts           # Section-specific metadata
```

### Metadata Standards

**Title Patterns:**
- **Section Pages**: "Doug.is / SectionName" (e.g., "Doug.is / Building")
- **Project Pages**: "ProjectName | Building | Doug.is" (e.g., "Oil Price Ticker | Building | Doug.is")
- **Blog Posts**: "PostTitle | Thinking | Doug.is"
- **Homepage**: "Doug.is - Building, Advising, and Investing"

**Description Standards:**
- **Length**: 150-160 characters optimal for SEO and social sharing
- **Content**: Compelling, action-oriented descriptions that encourage clicks
- **Consistency**: Maintain professional tone aligned with personal brand
- **Keywords**: Natural integration of relevant keywords for SEO

**Image Requirements:**
- **Dimensions**: 1200x630px for optimal social sharing
- **Format**: PNG or JPG, optimized for web
- **Branding**: Consistent doug.is visual identity
- **Fallback**: Default branded image for pages without specific images

## Implementation Patterns

### Static Page Metadata

**Section Pages** (`src/app/[section]/metadata.ts`):
```typescript
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Doug.is / Building',
  description: 'Explore my software development projects, from iOS apps to web applications. Discover the tools and technologies I use to build innovative solutions.',
  openGraph: {
    title: 'Building Projects | Doug.is',
    description: 'Explore my software development projects, from iOS apps to web applications. Discover the tools and technologies I use to build innovative solutions.',
    url: 'https://doug.is/building',
    siteName: 'Doug.is',
    images: [
      {
        url: 'https://doug.is/images/building.jpg',
        width: 1200,
        height: 630,
        alt: 'Doug.is Building Projects',
      }
    ],
    locale: 'en_US',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Building Projects | Doug.is',
    description: 'Explore my software development projects, from iOS apps to web applications.',
    images: ['https://doug.is/images/building.jpg'],
  },
  alternates: {
    canonical: 'https://doug.is/building',
  },
}
```

### Dynamic Content Metadata

**Blog Posts** (`src/app/thinking/[primary-category]/[slug]/page.tsx`):
```typescript
export async function generateMetadata({
  params,
}: {
  params: { 'primary-category': string; slug: string }
}): Promise<Metadata> {
  const slug = params.slug
  const category = params['primary-category']
  
  // Fetch post data
  const post = await getPostBySlug(slug)
  
  if (!post) {
    return {
      title: 'Post Not Found | Doug.is',
      description: 'The requested blog post could not be found.',
    }
  }

  const title = `${post.title} | Thinking | Doug.is`
  const description = post.excerpt || post.content.substring(0, 155) + '...'
  const publishedTime = post.published_at
  const featuredImage = post.featured_image || 'https://doug.is/images/thinking.jpg'
  const canonicalUrl = `https://doug.is/thinking/${category}/${slug}`

  return {
    title,
    description,
    openGraph: {
      title: `${post.title} | Doug.is`,
      description,
      url: canonicalUrl,
      siteName: 'Doug.is',
      images: [
        {
          url: featuredImage,
          width: 1200,
          height: 630,
          alt: post.title,
        }
      ],
      locale: 'en_US',
      type: 'article',
      publishedTime,
      authors: ['Doug'],
    },
    twitter: {
      card: 'summary_large_image',
      title: `${post.title} | Doug.is`,
      description,
      images: [featuredImage],
    },
    alternates: {
      canonical: canonicalUrl,
    },
  }
}
```

### Admin Page Security

**Admin Pages** (`src/app/admin/layout.tsx`):
```typescript
export const metadata: Metadata = {
  title: 'Admin Dashboard | Doug.is',
  description: 'Administrative dashboard for managing website content and settings.',
  robots: {
    index: false,
    follow: false,
    nocache: true,
    googleBot: {
      index: false,
      follow: false,
      noimageindex: true,
      'max-video-preview': -1,
      'max-image-preview': 'none',
      'max-snippet': -1,
    },
  },
}
```

## Social Sharing Image Workflow

### Image Creation Standards

**Dimensions and Format:**
- **Size**: 1200x630px (optimal for all social platforms)
- **Format**: PNG for graphics with text, JPG for photos
- **Quality**: High quality but web-optimized (under 1MB)
- **Text**: Large, readable fonts (minimum 48px for body text)
- **Branding**: Consistent Doug.is visual identity

**Design Guidelines:**
- **Background**: Brand-consistent backgrounds or gradients
- **Logo**: Doug.is logo or branding element
- **Typography**: Clear, professional fonts that match website
- **Colors**: Consistent with website color palette
- **Content**: Page-specific content when relevant

**File Organization:**
```
public/images/
├── social/                    # Social sharing images
│   ├── default.jpg           # Default fallback image
│   ├── building.jpg          # Section-specific images
│   ├── thinking.jpg
│   ├── investing.jpg
│   └── projects/             # Project-specific images
│       ├── oil-price-ticker.jpg
│       └── hopping-list.jpg
```

### Image Optimization

**Next.js Image Integration:**
```typescript
// In metadata objects
images: [
  {
    url: 'https://doug.is/images/social/building.jpg',
    width: 1200,
    height: 630,
    alt: 'Doug.is Building Projects',
  }
]
```

**Performance Optimization:**
- Use Next.js Image component for automatic optimization
- Store images in `/public/images/` directory
- Use absolute URLs in metadata for social platforms
- Implement lazy loading for non-critical images

## Testing Framework

### Metadata Validation Tests

**Test Structure** (`src/components/__tests__/MetadataValidation.test.tsx`):
```typescript
import { render } from '@testing-library/react'
import { validateMetadata, validateSocialSharing } from '@/lib/test-utils'

describe('Metadata Validation', () => {
  describe('Page Metadata', () => {
    it('should have proper OpenGraph metadata structure', () => {
      const metadata = {
        title: 'Test Page | Doug.is',
        description: 'Test description',
        openGraph: {
          title: 'Test Page | Doug.is',
          description: 'Test description',
          url: 'https://doug.is/test',
          siteName: 'Doug.is',
          images: [{ url: 'https://doug.is/images/test.jpg', width: 1200, height: 630 }],
          type: 'website',
        },
      }
      
      expect(validateMetadata(metadata)).toBe(true)
    })
  })
})
```

**Validation Utilities** (`src/lib/test-utils.tsx`):
```typescript
export function validateMetadata(metadata: any): boolean {
  return !!(
    metadata.title &&
    metadata.description &&
    metadata.openGraph?.title &&
    metadata.openGraph?.description &&
    metadata.openGraph?.url &&
    metadata.twitter?.card
  )
}

export function validateSocialSharing(metadata: any): boolean {
  return !!(
    metadata.openGraph?.images?.[0]?.url &&
    metadata.openGraph?.images?.[0]?.width === 1200 &&
    metadata.openGraph?.images?.[0]?.height === 630 &&
    metadata.twitter?.images?.[0]
  )
}
```

### Testing Commands

```bash
# Run metadata-specific tests
npm test -- --testNamePattern="Metadata"

# Run all tests with coverage
npm test:coverage

# Validate metadata structure
npm test src/components/__tests__/MetadataValidation.test.tsx
```

## Maintenance Procedures

### Adding New Pages

**Checklist for New Static Pages:**
1. **Create metadata.ts** in route directory (not route group)
2. **Follow title pattern**: "Doug.is / PageName" for sections
3. **Write compelling description** (150-160 characters)
4. **Create social sharing image** (1200x630px)
5. **Add OpenGraph metadata** with all required fields
6. **Add Twitter Card metadata** for optimal Twitter sharing
7. **Set canonical URL** for SEO
8. **Write metadata tests** to validate implementation
9. **Test social platform previews** before deployment

**Checklist for New Dynamic Pages:**
1. **Implement generateMetadata function** for dynamic content
2. **Extract content for titles and descriptions** from data source
3. **Handle fallback metadata** for missing or invalid data
4. **Create or reference appropriate social images**
5. **Set proper OpenGraph type** (article, website, etc.)
6. **Add publishedTime and authors** for article types
7. **Test with various content scenarios**
8. **Validate metadata generation** with test data

### Content Updates

**Blog Post Publishing Workflow:**
1. **Create post content** with title, excerpt, and featured image
2. **Verify featured image** is properly sized for social sharing
3. **Test dynamic metadata generation** before publishing
4. **Validate social platform previews** using debug tools
5. **Check canonical URLs** are correctly generated
6. **Monitor social sharing performance** after publication

**Project Page Updates:**
1. **Update project descriptions** as needed for accuracy
2. **Create new social sharing images** for visual updates
3. **Update technology metadata** when stack changes
4. **Test project page metadata** across social platforms
5. **Validate GitHub and external links** in metadata

### Regular Maintenance Tasks

**Monthly Reviews:**
- **Audit metadata coverage** across all pages
- **Check social sharing image loading** and optimization
- **Validate canonical URLs** are correct and accessible
- **Review social platform changes** that might affect metadata
- **Monitor metadata test coverage** and update as needed

**Quarterly Updates:**
- **Review brand consistency** across all social sharing
- **Update default fallback images** if brand evolves
- **Audit SEO performance** and adjust descriptions as needed
- **Check new social platform requirements** and implement if needed

## Troubleshooting

### Common Issues

**Metadata Not Appearing:**
- Verify metadata is properly exported from page/layout
- Check for TypeScript errors in metadata objects
- Ensure image URLs are absolute and accessible
- Validate metadata structure against Next.js requirements

**Social Platform Previews Not Updating:**
- Social platforms cache metadata aggressively
- Use platform debug tools to force refresh:
  - Twitter: https://cards-dev.twitter.com/validator
  - Facebook: https://developers.facebook.com/tools/debug/
  - LinkedIn: https://www.linkedin.com/post-inspector/
- Clear metadata cache by adding query parameters temporarily

**Image Loading Issues:**
- Verify image dimensions are exactly 1200x630px
- Check image file size (should be under 1MB)
- Ensure images are accessible via absolute URLs
- Test image loading in incognito/private browsing

### Debug Tools

**Metadata Validation Tools:**
- Twitter Card Validator: https://cards-dev.twitter.com/validator
- Facebook Sharing Debugger: https://developers.facebook.com/tools/debug/
- LinkedIn Post Inspector: https://www.linkedin.com/post-inspector/
- Open Graph Check: https://opengraphcheck.com/

**Testing Commands:**
```bash
# Validate metadata structure
npm test src/components/__tests__/MetadataValidation.test.tsx

# Check specific page metadata
curl -I https://doug.is/building

# Test social sharing
curl -A "facebookexternalhit/1.1" https://doug.is/building
```

## Future Extensions

### Planned Enhancements

**Automated Image Generation:**
- Consider implementing automated social sharing image generation
- Use Canvas API or image generation services
- Template-based approach for consistent branding
- Dynamic text overlay for blog posts and projects

**Advanced SEO Features:**
- JSON-LD structured data for rich snippets
- Article schema for blog posts
- Organization schema for professional pages
- FAQ schema for relevant content

**Performance Optimizations:**
- Metadata caching strategies for dynamic content
- CDN optimization for social sharing images
- Lazy loading for non-critical metadata elements

### Extension Patterns

**New Content Types:**
When adding new content types (events, courses, etc.):
1. **Follow established metadata patterns**
2. **Create content-specific social images**
3. **Implement appropriate OpenGraph types**
4. **Add specialized metadata fields** as needed
5. **Write comprehensive tests** for new patterns
6. **Document new patterns** in this guide

**New Social Platforms:**
When supporting new social platforms:
1. **Research platform-specific requirements**
2. **Test metadata compatibility** thoroughly
3. **Update validation utilities** to include new platform
4. **Add platform-specific optimizations** if needed
5. **Update documentation** with new platform guidelines

## Success Metrics

**Technical Metrics:**
- ✅ **100% Metadata Coverage**: All pages have complete metadata
- ✅ **7/7 Tests Passing**: Comprehensive metadata validation testing
- ✅ **Zero Performance Impact**: No degradation in page load times
- ✅ **Social Platform Compatibility**: Perfect previews on all target platforms

**Business Metrics:**
- **Social Sharing CTR**: Monitor click-through rates from social platforms
- **Search Engine Visibility**: Track organic search traffic improvements
- **Brand Recognition**: Consistent doug.is branding across all platforms
- **Professional Presentation**: High-quality appearance on all social platforms

This implementation provides a robust foundation for metadata and social media sharing that can evolve with the website's needs while maintaining consistency and performance.
